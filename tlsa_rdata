#!/usr/bin/env python

"""
#
# Generate DNS rdata for a TLSA resource record from given parameters.
# 
# Usage: gen_tlsa_rdata <certfile> <usage> <selector> <matchingtype>
#
# See RFC 6698 for details
# 
#        usage: 0, 1, 2, or 3
#        selector: 0 (full cert), or 1 (only pubkey)
#        matchingtype: 0 (full selector), 1 (sha256 hash), 2 (sha512 hash)
# 
# Author: Shumon Huque <shuque@upenn.edu>
#
"""

import sys, getopt, hashlib, M2Crypto


def usage():
    print("""\

Usage: tlsa_rdata <certfile> <usage> <selector> <matchingtype>

Where,
       certfile: a file containing an X.509 certificate typically in PEM form
       usage: TLSA usage field: 0, 1, 2, or 3
       selector: TLSA selector field: 0 (full cert), or 1 (only pubkey)
       matchingtype: 0 (full selector), 1 (sha256 hash), 2 (sha512 hash)      

""")
    return


def hexdump(inputstring, separator=''):
    """return a hexadecimal representation of the given string"""
    hexlist = ["%02x" % ord(x) for x in inputstring]
    return separator.join(hexlist)


def compute_hash(func, string):
    """compute hash of string using given hash function"""
    h = func()
    h.update(string)
    return h.hexdigest()


def certfile_to_certobj(filename):
    """convert cert file to M2Crypto X509 object"""
    return M2Crypto.X509.load_cert_string(open(filename).read())


def get_certdata(certobj, sel):
    """given selector, return certificate data in binary (DER) form"""
    if sel == 0:
        certdata = certobj.as_der()
    elif sel == 1:
        certdata = certobj.get_pubkey().as_der()
    else:
        raise ValueError("selector type %d not recognized" % sel)
    return certdata


def get_hexdata(certdata, matchtype):
    """given matchtype, return hex of certdata or its hash"""
    if matchtype == 0:
        hexdata = hexdump(certdata)
    elif matchtype == 1:
        hexdata = compute_hash(hashlib.sha256, certdata)
    elif matchtype == 2:
        hexdata = compute_hash(hashlib.sha512, certdata)
    else:
        raise ValueError("matchtype %d not recognized" % matchtype)
    return hexdata


if __name__ == '__main__':

    try:
        certfile, usage, sel, matchtype = sys.argv[1:]
        usage = int(usage)
        sel = int(sel)
        matchtype = int(matchtype)
    except (ValueError, IndexError, KeyError) as e:
        usage()
        sys.exit(1)

    certobj = certfile_to_certobj(certfile)
    certdata = get_certdata(certobj, sel)
    hexdata = get_hexdata(certdata, matchtype)

    print(">>> Certificate Information:")
    print("Serial : %x" % certobj.get_serial_number())
    print("Issuer : %s" % certobj.get_issuer().as_text())
    print("Subject: %s" % certobj.get_subject().as_text())
    try:
        san = certobj.get_ext('subjectAltName')
        print("Subject Alternative Name(s): %s" % san.get_value())
    except LookupError:
        pass

    sig_start = certobj.get_not_before().get_datetime()
    sig_end   = certobj.get_not_after().get_datetime()
    print("Certificate Inception:  %s %s<br>" % (sig_start, sig_start.tzname()))
    print("Certificate Expiration: %s %s<br>" % (sig_end, sig_end.tzname()))

    print("\nGenerated TLSA Record:")
    print("%d %d %d %s" % (usage, sel, matchtype, hexdata))
